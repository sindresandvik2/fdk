<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.5.RELEASE</version>
		<relativePath/>
	</parent>

    <groupId>no.dcat</groupId>
	<artifactId>harvester</artifactId>
	<version>1.0.1</version>
	<packaging>jar</packaging>

	<properties>
        <!--standard properties-->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <maven.exec.skip>false</maven.exec.skip>
        <!--end standard properties-->

        <docker.image.prefix>dcatno</docker.image.prefix>
		<docker.registry/>

		<unittest.category/>
		<endtoendtest.category/>
		<loadtest.category/>
		<integrationtest.category/>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!-- Denne var ikke her opprinnelig. Måtte inkluidere den for å støtte konfigurasjonsannoteringer i ApplicationSettings -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
		<!-- må ha actuator for å kjøre på openshift. kreves av readyness probe -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.7</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>1.11.1</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>jena-base</artifactId>
			<version>3.8.0</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>org.apache.jena</groupId>
			<artifactId>apache-jena-libs</artifactId>
			<version>3.8.0</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>

		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20180813</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>no.dcat</groupId>
			<artifactId>datastore</artifactId>
			<version>1.0.3</version>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>unit-test</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<unittest.category>,no.dcat.shared.testcategories.UnitTest</unittest.category>
			</properties>
		</profile>
		<profile>
			<id>integration-test</id>
			<properties>
				<integrationtest.category>,no.dcat.shared.testcategories.IntegrationTest</integrationtest.category>
			</properties>
		</profile>
		<profile>
			<id>end-to-end-test</id>
			<properties>
				<endtoendtest.category>,no.dcat.shared.testcategories.EndToEndTest</endtoendtest.category>
			</properties>
		</profile>
		<profile>
			<id>load-test</id>
			<properties>
				<loadtest.category>,no.dcat.shared.testcategories.LoadTest</loadtest.category>
			</properties>
		</profile>
	</profiles>

	<build>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<targetPath>${project.build.outputDirectory}</targetPath>
				<excludes>
					<exclude>banner.txt</exclude>
				</excludes>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<targetPath>${project.build.outputDirectory}</targetPath>
				<includes>
					<include>banner.txt</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<classifier>exec</classifier>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Use -DskipDockerBuild to skip this rule -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.1.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<imageName>
						${docker.registry}${docker.image.prefix}/${project.artifactId}:latest
					</imageName>
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<pushImage>false</pushImage>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}-exec.jar</include>
							<excludes>
								<exclude>target/**/*</exclude>
								<exclude>pom.xml</exclude>
								<exclude>*.iml</exclude>
							</excludes>
						</resource>
					</resources>
				</configuration>
			</plugin>

			<plugin>
				<!-- Unit test runner -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<groups>java.lang.Exception ${unittest.category} ${endtoendtest.category} ${loadtest.category}</groups> <!-- java.lang.Exception is a hack to make a valid comma-separated list og category classes -->
					<argLine>${surefireArgLine} -Dfile.encoding=${project.build.sourceEncoding}</argLine>
				</configuration>
			</plugin>
			<plugin>
			<!-- Generates coverage reports from unit and integration tests -->
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.8.1</version>
			<executions>
			<!--
                JaCoCo report for unit tests
            -->
			<execution>
				<id>pre-unit-test</id>
				<goals>
					<goal>prepare-agent</goal>
				</goals>
				<configuration>
					<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
					<propertyName>surefireArgLine</propertyName>
				</configuration>
			</execution>
			<execution>
				<id>post-unit-test</id>
				<phase>test</phase>
				<goals>
					<goal>report</goal>
				</goals>
				<configuration>
					<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
					<!-- Sets the output directory for the code coverage report for unit tests. -->
					<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
				</configuration>
			</execution>
			</executions>
			</plugin>
		</plugins>
	</build>

</project>
