events {
  worker_connections  1024;
}

http {

    map $http_accept $mytarget {
        default http://registration-react:4300;
        "~*text/html"   http://registration-react:4300;
        "~*application/json" http://registration-api:8080;
        "~*text/turtle" http://registration-api:8080;
        "~*application/ld\+json" http://registration-api:8080;
        "~*application/rdf\+xml" http://registration-api:8080;
    }

    server {

        #listen 8099 ssl;
        #server_name localhost;
        #proxy_set_header Host localhost:8099;
        #ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        #ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

        listen 8080;
        server_name default_server;


        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        proxy_read_timeout          600;
        send_timeout                600;

        client_max_body_size 50M;


        # Compression

         # Enable Gzip compressed.
         gzip on;

        # Enable compression both for HTTP/1.0 and HTTP/1.1.
        gzip_http_version  1.1;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and cpu usage, offering about
        # 75% reduction for most ascii files (almost identical to level 9).
        gzip_comp_level    5;

        # Don't compress anything that's already small and unlikely to shrink much
        # if at all (the default is 20 bytes, which is bad as that usually leads to
        # larger files after gzipping).
        gzip_min_length    256;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header (required for CloudFront).
        gzip_proxied       any;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        gzip_vary          on;

        # Compress all output labeled with one of the following MIME-types.
        gzip_types
          application/atom+xml
          application/javascript
          #application/json
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/xhtml+xml
          application/xml
          font/opentype
          image/svg+xml
          image/x-icon
          text/css
          text/plain
          text/x-component;


        location /sockjs-node {
            proxy_pass http://registration-react:4300;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location ~* /catalogs/[0-9a-z]+/datasets/ {
            if ($http_accept ~* "application/json") {
                proxy_pass http://registration-api:8080;
            }
            if ($http_accept ~* "text/html") {
                proxy_pass http://registration-react:4300;
            }
        }

        location / {
            proxy_pass $mytarget$request_uri;
        }

        location /reference-data {
             rewrite .+?(reference-data\/?)(.*) /$2 break;

             proxy_pass http://reference-data:8080;
        }

        location /public {
             proxy_pass http://registration-api:8080;
        }

        location /referenceData {
             proxy_pass http://registration-api:8080;
        }

        location /index.html {
            proxy_pass http://registration-react:4300;
        }


        location /innloggetBruker {
            proxy_pass http://registration-api:8080;
        }

        location /login {
            proxy_pass http://registration-api:8080;
            proxy_set_header Host $http_host;
        }

        location /logout {
            proxy_pass http://registration-api:8080;
            proxy_set_header Host $http_host;
        }

        location /loggetut {
            proxy_pass http://registration-api:8080;
        }

        location /loginerror {
            proxy_pass http://registration-api:8080;
        }

        location ~* /static/.*\.(js|png|jpg|ttf|svg|eot|woff|woff2|css)$ {
            proxy_pass http://registration-react:4300;
        }

        location ~* \.(js|png|jpg|ttf|svg|eot|woff|woff2|css)$ {
            proxy_pass http://registration-react:4300;
        }

        location /registrering/saml {
            proxy_pass http://registration-api:8080;
        }

        location /saml {
            proxy_pass http://registration-api:8080;
        }


        # denne kan fjernes når alt går til react
        location /react {
            proxy_pass http://registration-react:4300;
        }



        error_page 502 /custom_502.html;
            location = /custom_502.html {
                root /usr/share/nginx/html/errorPages;
            }
            location = /fdk-logo@2x.png {
              root /usr/share/nginx/html/errorPages;
            }
            location = /favicon.ico {
              root /usr/share/nginx/html/errorPages;
            }

    }
}
